// SPDX-License-Identifier: MIT
pragma solidity ^0.8.7;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";




contract Ownable {
    address public owner;
    address public newOwner;

    event OwnershipTransferred(address indexed _from, address indexed _to);

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner {
      require(msg.sender == owner);
      _;
    }
    function transferOwnership(address _to) public onlyOwner{
        newOwner = _to;
    }

    function acceptOwnership() public {
        require(msg.sender == newOwner);
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
        newOwner = address(0);
    }
}


contract JoeCoin is ERC20, Ownable{

    address public treasuryAddress;
    uint8 _decimals;
    uint public _totalSupply;
    uint256 public transfers;
    uint256 public bp = 900; // 90% in basis points

    mapping(address => uint) public balances;

    mapping(address => mapping (address => uint256)) allowed;

    constructor(address _treasuryAddress) ERC20("JoeCoin", "JC"){
        treasuryAddress = _treasuryAddress;
        _decimals = 1;
        _totalSupply = 1000 * 10 ** _decimals;
        balances[msg.sender] = _totalSupply;
        emit Transfer(address(0), msg.sender, _totalSupply);
    }

    function setTreasuryAddress(address _address) public onlyOwner{
        treasuryAddress = _address;
    }

    function decimals() public view override returns (uint8) {
        return _decimals;
    }   


    function totalSupply() public override view returns (uint256) {
        return _totalSupply;
    }

    function balanceOf(address _owner) public override view returns (uint256 balance) {
        return balances[_owner];
    }

    function approve(address _to, uint256 _value) public override returns (bool) {
        allowed[msg.sender][_to] = _value;
        emit Approval(msg.sender, _to, _value);
        return true;
    }

    function allowance(address _from, address _to) public override view returns (uint256) {
        return allowed[_from][_to];
    }

    function increaseAllowance(address _to, uint256 _addedValue) public override returns (bool) {
        approve(_to, allowed[msg.sender][_to] + _addedValue);
        return true;
    }

    function decreaseAllowance(address _to, uint256 _subtractedValue) public override returns (bool) {
        uint256 currentAllowance = allowed[msg.sender][_to];
        require(currentAllowance >= _subtractedValue, "ERC20: decreased allowance below zero");
        approve(_to, currentAllowance - _subtractedValue);
        return true;
    }


    function calculateValue(uint256 _value) internal view returns (uint256 sent, uint256 received, uint256 burned, uint256 treasury) {
        sent = _value;
        received =  uint256(_value * bp / 1000);
        treasury = (_value - received) / 10;
        burned = treasury * 9;
        return(sent, received, burned, treasury);
    }

    function transfer(address _to, uint256 _value) public override returns (bool) {
        require(_value <= balances[msg.sender]);    
        (uint256 sent, uint256 received, uint256 burned, uint256 treasury) = calculateValue(_value);
        balances[msg.sender] -= sent;
        _totalSupply -= burned;
        balances[_to] += received;
        balances[treasuryAddress] += treasury;
        transfers+=1;
        emit Transfer(msg.sender, _to, sent);
        return true;
    }

    function splitTokens(address _from, address _to, uint256 sent, uint256 received, uint256 burned, uint256 treasury) internal {
        
    }

    function transferFrom(address _from, address _to, uint256 _value) public override returns (bool) {
        require(_value <= balances[_from]);
        require(_value <= allowed[_from][msg.sender]);
        (uint256 sent, uint256 received, uint256 burned, uint256 treasury) = calculateValue(_value);
        allowed[_from][msg.sender] -= sent;
        balances[_from] -= sent;
        _totalSupply -= burned;
        balances[_to] += received;
        balances[treasuryAddress] += treasury;
        transfers+=1;
        emit Transfer(_from, _to, sent);
        return true;
    }

    function mint(uint amount) public onlyOwner returns (bool) {
        balances[owner] += amount;
        _totalSupply += amount;
        return true;

    }

    function getBasisPoints() public view returns(uint256){
        return bp;
    }

    function setBasisPoints(uint _bp) public {
        require(msg.sender == treasuryAddress);
        bp = _bp;
    }

    function getTransfers() public view returns(uint256){
        return transfers;
    }

    function resetTransfers() public {
        require(msg.sender == treasuryAddress);
        transfers = 0;
    }

    function setTransfers(uint _transfers) public onlyOwner{
        transfers = _transfers;
    }

}


contract PriceChange {
    address addr;
    uint public lastUpdate;

    constructor(){
        lastUpdate = block.timestamp;
    }

    function setAddress(address _addr) public {
         addr = _addr;
    }
    
    function updatePrice() public{
        //require((block.timestamp - lastUpdate) > 86400, "To Soon To Update");
        JoeCoin c = JoeCoin(addr);
        lastUpdate = block.timestamp;
       
        c.setBasisPoints(getRate(c.getTransfers()));
        c.resetTransfers();
        c.transfer(msg.sender, c.balanceOf(address(this)));
    }


    function getRate(uint256 _halflife) internal pure returns(uint256) {
        _halflife += 5;
        uint factor = 50;
        if(_halflife < 18){
            uint deltaRate = 2 ** (104*10**10 / (_halflife*10**10));
            factor += 9500 / deltaRate;
        }else{
            factor += 225;
        }
        return(1000-factor);
    }



    

}


